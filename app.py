# app.py
# -*- coding: utf-8 -*-
# OneDay Telegram Bot ‚Äî —Ä–∞–∑–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
# PTB 20.x, Python 3.13
# –õ–æ–≥—ñ–∫–∞: –ø–æ–∫—Ä–æ–∫–æ–≤–∏–π –∑–±—ñ—Ä –∑–∞—è–≤–∫–∏ ‚Üí –º–æ–¥–µ—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω–æ–º ‚Üí –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª–∏

import os
import re
import logging
from datetime import datetime
from html import escape
from typing import Dict, Any, Optional

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
)
from telegram.constants import ParseMode, ChatType
from telegram.ext import (
    ApplicationBuilder, Application, ContextTypes,
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters
)

# ===================== CONFIG =====================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
log = logging.getLogger("oneday-bot")

# ‚õîÔ∏è –ü–Ü–î–°–¢–ê–í –¢–£–¢ –°–í–Ü–ô –¢–û–ö–ï–ù (–∫—Ä–∞—â–µ ‚Äî —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è TELEGRAM_BOT_TOKEN)
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or "PASTE_YOUR_BOT_TOKEN_HERE"
ADMIN_ID = 924805332  # —Ç–≤—ñ–π –∞–¥–º—ñ–Ω

MAIN_CHANNEL = "@OneDaySK"
CITY_CHANNELS = {
    "Bratislava": "@OneDayBratislava",
    "Ko≈°ice": "@OneDayKosice",
    "Pre≈°ov": "@OneDayPresov",
    "≈Ωilina": "@OneDayZilina",
    "Nitra": "@OneDayNitra",
}

SUPPORTED_CITIES = list(CITY_CHANNELS.keys())

# ===================== STATES =====================
(
    LANG,
    CITY,
    TASK,
    ADDRESS,
    CHOOSING_LOCATION,
    WAITING_LOCATION_CONFIRM,
    DATETIME_SCHEDULE,
    HELPERS,
    PAY_TYPE,
    PAY_VALUE,
    CONTACT,
    PREVIEW,
) = range(100, 112)

# ===================== CALLBACK ACTIONS =====================
ACT_MENU = "menu"
ACT_START_ORDER = "start_order"
ACT_HELP = "help"
ACT_PAY_FIXED = "pay_fixed"
ACT_PAY_HOURLY = "pay_hourly"
ACT_MOD_APPROVE = "mod_approve"
ACT_MOD_REJECT = "mod_reject"

# ===================== HELPERS =====================
def menu_inline() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", callback_data=ACT_START_ORDER)],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data=ACT_HELP)],
    ])

def city_kbd() -> ReplyKeyboardMarkup:
    rows = [[c] for c in SUPPORTED_CITIES]
    rows.append(["–Ü–Ω—à–µ –º—ñ—Å—Ç–æ (–≤–≤–µ–¥—É –≤—Ä—É—á–Ω—É)"])
    rows.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üö™ –°–∫–∞—Å—É–≤–∞—Ç–∏"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)

def location_request_kbd() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üìç –û–±—Ä–∞—Ç–∏ –Ω–∞ –º–∞–ø—ñ", request_location=True)],
         [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("üö™ –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
        resize_keyboard=True, one_time_keyboard=True
    )

def location_confirm_ikbd(lat: float, lon: float) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="loc_confirm")],
        [InlineKeyboardButton("üîÅ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É", callback_data="loc_change")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="loc_back")],
        [InlineKeyboardButton("üó∫Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –ö–∞—Ä—Ç–∞—Ö", url=f"https://maps.google.com/?q={lat},{lon}")],
    ])

def pay_type_kbd() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∂ –§—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞", callback_data=ACT_PAY_FIXED)],
        [InlineKeyboardButton("‚è±Ô∏è –ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Å—Ç–∞–≤–∫–∞", callback_data=ACT_PAY_HOURLY)],
    ])

def contact_kbd() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
         [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("üö™ –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
        resize_keyboard=True, one_time_keyboard=True
    )

def _reset_order(context: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    context.user_data["order"] = {
        "lang": "uk",
        "city": None,
        "task": None,
        "address": None,
        "location": None,  # {"lat": ..., "lon": ...}
        "datetime": None,
        "helpers": None,
        "pay_type": None,  # "fixed"|"hourly"
        "pay_value": None,
        "contact": None,   # {"phone": "...", "name": "...", "tg": "..."}
        "user": None,      # –∑–∞–ø–æ–≤–Ω–∏–º–æ –∑—ñ —Å—Ç–∞—Ä—Ç—É
    }
    return context.user_data["order"]

def sanitize_phone(text: str) -> Optional[str]:
    digits = re.sub(r"\D", "", text or "")
    if 8 <= len(digits) <= 15:
        return digits
    return None

def format_order(order: Dict[str, Any]) -> str:
    parts = []
    parts.append("üì¢ <b>–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</b>")
    if order.get("city"):
        parts.append(f"üèôÔ∏è –ú—ñ—Å—Ç–æ: <b>{escape(order['city'])}</b>")
    if order.get("address"):
        parts.append(f"üìç –ê–¥—Ä–µ—Å–∞: <b>{escape(order['address'])}</b>")
    if order.get("location"):
        lat = order["location"]["lat"]
        lon = order["location"]["lon"]
        parts.append(f"üó∫Ô∏è –ì–µ–æ—Ç–æ—á–Ω—ñ—Å—Ç—å: <a href='https://maps.google.com/?q={lat},{lon}'>{lat:.6f}, {lon:.6f}</a>")
    if order.get("task"):
        parts.append(f"üß∞ –ó–∞–≤–¥–∞–Ω–Ω—è: <b>{escape(order['task'])}</b>")
    if order.get("datetime"):
        parts.append(f"üóìÔ∏è –ö–æ–ª–∏: <b>{escape(order['datetime'])}</b>")
    if order.get("helpers"):
        parts.append(f"üë• –ö-—Å—Ç—å –ø–æ–º—ñ—á–Ω–∏–∫—ñ–≤: <b>{order['helpers']}</b>")
    if order.get("pay_type"):
        label = "–§—ñ–∫—Å–æ–≤–∞–Ω–∞" if order["pay_type"] == "fixed" else "–ü–æ–≥–æ–¥–∏–Ω–Ω–∞"
        parts.append(f"üíµ –û–ø–ª–∞—Ç–∞: <b>{label}</b>")
    if order.get("pay_value"):
        unit = "‚Ç¨ (–∑–∞ –≤—Å–µ)" if order["pay_type"] == "fixed" else "‚Ç¨/–≥–æ–¥"
        parts.append(f"   ‚îî —Å—É–º–∞/—Å—Ç–∞–≤–∫–∞: <b>{order['pay_value']} {unit}</b>")
    if order.get("contact"):
        c = order["contact"]
        contact_line = []
        if c.get("name"):
            contact_line.append(escape(c["name"]))
        if c.get("phone"):
            contact_line.append(f"—Ç–µ–ª: +{c['phone']}")
        if c.get("tg"):
            contact_line.append(f"TG: @{c['tg']}")
        if contact_line:
            parts.append("üë§ –ö–æ–Ω—Ç–∞–∫—Ç: " + " | ".join(contact_line))
    if order.get("user"):
        u = order["user"]
        parts.append(f"‚Äî –∞–≤—Ç–æ—Ä: {escape(u.get('name',''))} (id: <code>{u.get('id')}</code>)")
    return "\n".join(parts)

def moderation_kbd(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"{ACT_MOD_APPROVE}:{order_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"{ACT_MOD_REJECT}:{order_id}"),
        ]
    ])

# ===================== COMMANDS / MENU =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    _reset_order(context)
    user = update.effective_user
    context.user_data["order"]["user"] = {
        "id": user.id,
        "name": user.full_name,
        "tg": user.username or ""
    }
    text = (
        "–í—ñ—Ç–∞—é –≤ <b>OneDay</b>!\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ —Ä–∞–∑–æ–≤—É —Ä–æ–±–æ—Ç—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—é –π–æ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é."
    )
    if update.effective_chat.type in (ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL):
        await update.effective_message.reply_text(
            "–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."
        )
        return ConversationHandler.END

    await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=menu_inline())
    return LANG

async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == ACT_START_ORDER:
        return await ask_city(q, context)
    if q.data == ACT_HELP:
        await q.edit_message_text(
            "‚ÑπÔ∏è –ö—Ä–æ–∫–∏: –º—ñ—Å—Ç–æ ‚Üí –∑–∞–≤–¥–∞–Ω–Ω—è ‚Üí –∞–¥—Ä–µ—Å–∞ ‚Üí –ª–æ–∫–∞—Ü—ñ—è ‚Üí –¥–∞—Ç–∞/—á–∞—Å ‚Üí –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º—ñ—á–Ω–∏–∫—ñ–≤ ‚Üí –æ–ø–ª–∞—Ç–∞ ‚Üí –∫–æ–Ω—Ç–∞–∫—Ç ‚Üí –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
            reply_markup=menu_inline()
        )
        return LANG
    return LANG

# ===================== FLOW: CITY =====================
async def ask_city(update_or_q, context: ContextTypes.DEFAULT_TYPE):
    if hasattr(update_or_q, "edit_message_text"):
        await update_or_q.edit_message_text("üèôÔ∏è –û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É:")
        await update_or_q.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –º—ñ—Å—Ç:", reply_markup=city_kbd())
    else:
        await update_or_q.message.reply_text("üèôÔ∏è –û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É:", reply_markup=city_kbd())
    return CITY

async def on_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text in ("üö™ –°–∫–∞—Å—É–≤–∞—Ç–∏", "/cancel"):
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=menu_inline())
        return LANG

    context.user_data["order"]["city"] = text
    return await ask_task(update, context)

# ===================== FLOW: TASK =====================
async def ask_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "üß∞ –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ –∑–∞–≤–¥–∞–Ω–Ω—è (—â–æ –∑—Ä–æ–±–∏—Ç–∏):",
        reply_markup=ReplyKeyboardRemove()
    )
    return TASK

async def on_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if len(txt) < 5:
        await update.message.reply_text("–û–ø–∏—à–∏ —Ç—Ä–æ—Ö–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return TASK
    context.user_data["order"]["task"] = txt
    return await ask_address(update, context)

# ===================== FLOW: ADDRESS =====================
async def ask_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "üìç –í–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—É (–≤—É–ª–∏—Ü—è/–±—É–¥–∏–Ω–æ–∫/–ø–æ–≤–µ—Ä—Ö). –Ø–∫—â–æ –≤–∞–∂–∫–æ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.\n"
        "–î–∞–ª—ñ –æ–±–µ—Ä–µ–º–æ —Ç–æ—á–∫—É –Ω–∞ –º–∞–ø—ñ."
    )
    return ADDRESS

async def on_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    if txt.lower() in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "skip"):
        context.user_data["order"]["address"] = None
    else:
        context.user_data["order"]["address"] = txt
    return await ask_location(update, context)

# ===================== FLOW: LOCATION =====================
async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order = context.user_data.setdefault("order", {})
    order.pop("location", None)

    await update.effective_message.reply_text(
        "üìç –û–±–µ—Ä–∏ –ª–æ–∫–∞—Ü—ñ—é –Ω–∞ –∫–∞—Ä—Ç—ñ: –Ω–∞—Ç–∏—Å–Ω–∏ ¬´üìç –û–±—Ä–∞—Ç–∏ –Ω–∞ –º–∞–ø—ñ¬ª, –ø–æ—Å—Ç–∞–≤ –ø—ñ–Ω —ñ –Ω–∞–¥—ñ—à–ª–∏.",
        reply_markup=location_request_kbd()
    )
    return CHOOSING_LOCATION

async def on_location_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loc = update.message.location
    if not loc:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üìç –û–±—Ä–∞—Ç–∏ –Ω–∞ –º–∞–ø—ñ¬ª.",
            reply_markup=location_request_kbd()
        )
        return CHOOSING_LOCATION

    lat, lon = loc.latitude, loc.longitude
    context.user_data.setdefault("order", {})["location"] = {"lat": lat, "lon": lon}

    await update.message.reply_location(latitude=lat, longitude=lon)
    text = (
        "–û—Å—å —â–æ —Ç–∏ –æ–±—Ä–∞–≤(–ª–∞):\n"
        f"‚Ä¢ –®–∏—Ä–æ—Ç–∞: {lat:.6f}\n"
        f"‚Ä¢ –î–æ–≤–≥–æ—Ç–∞: {lon:.6f}\n\n"
        "–Ø–∫—â–æ –≤—Å–µ –æ–∫ ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–π."
    )
    await update.message.reply_text(text, reply_markup=location_confirm_ikbd(lat, lon))
    return WAITING_LOCATION_CONFIRM

async def on_location_confirm_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    data = q.data
    if data == "loc_change":
        await q.edit_message_reply_markup(reply_markup=None)
        await q.message.reply_text(
            "–û–∫, –æ–±–µ—Ä–∏ —ñ–Ω—à—É —Ç–æ—á–∫—É –Ω–∞ –º–∞–ø—ñ.",
            reply_markup=location_request_kbd()
        )
        return CHOOSING_LOCATION

    if data == "loc_back":
        await q.edit_message_reply_markup(reply_markup=None)
        await q.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ –¥–æ –∞–¥—Ä–µ—Å–∏. –ú–æ–∂–µ—à —É—Ç–æ—á–Ω–∏—Ç–∏ –∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.")
        return ADDRESS

    if data == "loc_confirm":
        await q.edit_message_reply_markup(reply_markup=None)
        await q.message.reply_text("‚úÖ –õ–æ–∫–∞—Ü—ñ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return await ask_datetime(q, context)

    await q.message.reply_text("–ù–µ –≤–ø—ñ–∑–Ω–∞–≤ –¥—ñ—é. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
    return WAITING_LOCATION_CONFIRM

# ===================== FLOW: DATETIME =====================
async def ask_datetime(update_or_q, context: ContextTypes.DEFAULT_TYPE):
    send = update_or_q.message.reply_text if hasattr(update_or_q, "message") else update_or_q.edit_message_text
    await send(
        "üóìÔ∏è –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏? –ù–∞–ø–∏—à–∏ —É –≤—ñ–ª—å–Ω—ñ–π —Ñ–æ—Ä–º—ñ (–Ω–∞–ø—Ä., ¬´—Å—å–æ–≥–æ–¥–Ω—ñ 16:00¬ª, ¬´22.08 –æ 9:30¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –∑ 10 –¥–æ 13¬ª)."
    )
    return DATETIME_SCHEDULE

async def on_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    context.user_data["order"]["datetime"] = txt
    return await ask_helpers(update, context)

# ===================== FLOW: HELPERS =====================
async def ask_helpers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "üë• –°–∫—ñ–ª—å–∫–∏ –ø–æ–º—ñ—á–Ω–∏–∫—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ? (1‚Äì4)",
    )
    return HELPERS

async def on_helpers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    if not txt.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ 1‚Äì4.")
        return HELPERS
    val = int(txt)
    if val < 1 or val > 4:
        await update.message.reply_text("–í–∫–∞–∂–∏ —á–∏—Å–ª–æ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 1‚Äì4.")
        return HELPERS
    context.user_data["order"]["helpers"] = val
    return await ask_pay_type(update, context)

# ===================== FLOW: PAY =====================
async def ask_pay_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "üíµ –û–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç–∏:",
        reply_markup=pay_type_kbd()
    )
    return PAY_TYPE

async def on_pay_type_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == ACT_PAY_FIXED:
        context.user_data["order"]["pay_type"] = "fixed"
        await q.edit_message_text("–í–∫–∞–∂–∏ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É —Å—É–º—É (‚Ç¨) –∑–∞ –≤—Å—é —Ä–æ–±–æ—Ç—É (–Ω–∞–ø—Ä., 60).")
        return PAY_VALUE
    elif q.data == ACT_PAY_HOURLY:
        context.user_data["order"]["pay_type"] = "hourly"
        await q.edit_message_text("–í–∫–∞–∂–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω—É —Å—Ç–∞–≤–∫—É (‚Ç¨ / –≥–æ–¥) (–Ω–∞–ø—Ä., 8).")
        return PAY_VALUE
    else:
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ:", reply_markup=pay_type_kbd())
        return PAY_TYPE

async def on_pay_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip().replace(",", ".")
    try:
        val = float(txt)
        if val <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_text("–í–≤–µ–¥–∏ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 50 –∞–±–æ 8.5")
        return PAY_VALUE
    context.user_data["order"]["pay_value"] = val
    return await ask_contact(update, context)

# ===================== FLOW: CONTACT =====================
async def ask_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "üìû –ó–∞–ª–∏—à –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –ø–æ–¥—ñ–ª–∏—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É.",
        reply_markup=contact_kbd()
    )
    return CONTACT

async def on_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    phone = None
    if contact and contact.phone_number:
        phone = sanitize_phone(contact.phone_number)
    else:
        phone = sanitize_phone(update.message.text or "")

    if not phone:
        await update.message.reply_text("–ù–µ —Å—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –ù–∞–¥—ñ—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–æ—é.")
        return CONTACT

    user = update.effective_user
    context.user_data["order"]["contact"] = {
        "phone": phone,
        "name": user.full_name,
        "tg": user.username or "",
    }
    await update.message.reply_text("–î—è–∫—É—é! –§–æ—Ä–º—É—é –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥‚Ä¶", reply_markup=ReplyKeyboardRemove())
    return await ask_preview(update, context)

# ===================== PREVIEW & MODERATION =====================
async def ask_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order = context.user_data["order"]
    text = format_order(order)

    await update.effective_message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:")
    if order.get("location"):
        await update.effective_message.reply_location(
            latitude=order["location"]["lat"], longitude=order["location"]["lon"]
        )
    await update.effective_message.reply_text(text, parse_mode=ParseMode.HTML)
    await update.effective_message.reply_text("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –ß–µ–∫–∞–π –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

    order_id = int(datetime.now().timestamp())
    context.user_data["last_order_id"] = order_id

    admin_text = "üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</b>\n\n" + text
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_text,
            parse_mode=ParseMode.HTML,
            reply_markup=moderation_kbd(order_id),
            disable_web_page_preview=True
        )
    except Exception as e:
        log.exception("–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞–º: %s", e)

    await update.effective_message.reply_text("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –î—è–∫—É—é!", reply_markup=menu_inline())
    return PREVIEW

async def on_mod_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await q.edit_message_text("–¢–∏ –Ω–µ –∞–¥–º—ñ–Ω —Ü—ñ—î—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
        return PREVIEW

    data = q.data or ""
    action, _, tail = data.partition(":")
    try:
        order_id = int(tail.strip())
    except Exception:
        order_id = None

    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–¥–µ–º–æ)
    order = context.user_data.get("order")
    if not order:
        await q.edit_message_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Å–µ–∞–Ω—Å –º—ñ–≥ —Å–∫–∏–Ω—É—Ç–∏—Å—å).")
        return PREVIEW

    if action == ACT_MOD_APPROVE:
        await q.edit_message_text("‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ. –ü—É–±–ª—ñ–∫—É—é‚Ä¶")
        await publish_order(context, order)
    elif action == ACT_MOD_REJECT:
        await q.edit_message_text("‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ. (–ë–µ–∑ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó)")
    else:
        await q.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    return PREVIEW

async def publish_order(context: ContextTypes.DEFAULT_TYPE, order: Dict[str, Any]):
    text = format_order(order)
    try:
        if order.get("location"):
            await context.bot.send_location(
                chat_id=MAIN_CHANNEL,
                latitude=order["location"]["lat"],
                longitude=order["location"]["lon"]
            )
        await context.bot.send_message(
            chat_id=MAIN_CHANNEL,
            text=text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    except Exception as e:
        log.exception("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —É –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª: %s", e)

    city = order.get("city", "")
    city_channel = CITY_CHANNELS.get(city)
    if city_channel:
        try:
            if order.get("location"):
                await context.bot.send_location(
                    chat_id=city_channel,
                    latitude=order["location"]["lat"],
                    longitude=order["location"]["lon"]
                )
            await context.bot.send_message(
                chat_id=city_channel,
                text=text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        except Exception as e:
            log.exception("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —É –º—ñ—Å—å–∫–∏–π –∫–∞–Ω–∞–ª: %s", e)

# ===================== CANCEL / FALLBACKS =====================
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("–ù–µ –≤–ø—ñ–∑–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.", reply_markup=menu_inline())
    return LANG

# ===================== APP SETUP =====================
def main():
    if not BOT_TOKEN or BOT_TOKEN == "PASTE_YOUR_BOT_TOKEN_HERE":
        raise SystemExit("–í—Å—Ç–∞–≤ —Ç–æ–∫–µ–Ω —É TELEGRAM_BOT_TOKEN –∞–±–æ –ø—Ä—è–º–æ –≤ –∫–æ–¥—ñ.")

    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start), CommandHandler("menu", start)],
        states={
            LANG: [
                CallbackQueryHandler(on_menu_click, pattern=rf"^({ACT_START_ORDER}|{ACT_HELP})$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, unknown),
            ],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_city)],
            TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_task)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_address)],
            CHOOSING_LOCATION: [
                MessageHandler(filters.LOCATION, on_location_received),
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    lambda u, c: u.message.reply_text(
                        "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ ¬´üìç –û–±—Ä–∞—Ç–∏ –Ω–∞ –º–∞–ø—ñ¬ª.",
                        reply_markup=location_request_kbd()
                    ) or CHOOSING_LOCATION
                ),
            ],
            WAITING_LOCATION_CONFIRM: [
                CallbackQueryHandler(on_location_confirm_cb, pattern=r"^loc_(confirm|change|back)$"),
            ],
            DATETIME_SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_datetime)],
            HELPERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_helpers)],
            PAY_TYPE: [CallbackQueryHandler(on_pay_type_cb, pattern=rf"^({ACT_PAY_FIXED}|{ACT_PAY_HOURLY})$")],
            PAY_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_pay_value)],
            CONTACT: [
                MessageHandler(filters.CONTACT, on_contact),
                MessageHandler(filters.TEXT & ~filters.COMMAND, on_contact),
            ],
            PREVIEW: [
                CallbackQueryHandler(on_mod_action, pattern=rf"^({ACT_MOD_APPROVE}|{ACT_MOD_REJECT}):\d+$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, unknown),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    log.info("OneDay bot started.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
