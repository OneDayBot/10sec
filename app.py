import os
import re
import logging
import datetime
import requests

from typing import List, Dict, Any, Optional

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    format="%(asctime)s %(levelname)s:%(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# -------------------- ENV --------------------
BOT_TOKEN       = os.environ["BOT_TOKEN"]
NOTION_TOKEN    = os.environ["NOTION_TOKEN"]
CATALOG_DB_ID   = os.environ["CATALOG_DB_ID"]   # –õ–ò–®–ï ID, –±–µ–∑ https:// —ñ ?v=
NOTES_DB_ID     = os.environ["NOTES_DB_ID"]     # –õ–ò–®–ï ID
WEBHOOK_URL     = os.environ.get("WEBHOOK_URL") # https://<your>.up.railway.app
PORT            = int(os.environ.get("PORT", 8000))

NOTION_HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Notion-Version": "2022-06-28",
    "Content-Type": "application/json",
}

NOTION_PAGES     = "https://api.notion.com/v1/pages"
NOTION_DB_QUERY  = "https://api.notion.com/v1/databases/{db_id}/query"

# -------------------- –°–¢–ê–ù–ò –î–Ü–ê–õ–û–ì–Ü–í --------------------
(
    MAIN,
    ADD_CAT_WAIT_NAME,
    ADD_SUB_CHOOSE_CAT,
    ADD_SUB_WAIT_NAME,
    NOTE_CHOOSE_CAT,
    NOTE_CHOOSE_SUB,
    NOTE_WAIT_TEXT,
    SEARCH_WAIT_QUERY,
) = range(8)

# -------------------- –ö–û–ù–°–¢–ê–ù–¢–ò –¢–ï–ö–°–¢–Ü–í --------------------
BTN_ADD_CAT  = "‚ûï –ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
BTN_ADD_SUB  = "‚ûï –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è"
BTN_NEW_NOTE = "üìù –ù–æ—Ç–∞—Ç–∫–∞"
BTN_SEARCH   = "üîé –ü–æ—à—É–∫"
BTN_HELP     = "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞"
BTN_CANCEL   = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
MAIN_KB = ReplyKeyboardMarkup(
    [[BTN_ADD_CAT, BTN_ADD_SUB],
     [BTN_NEW_NOTE, BTN_SEARCH],
     [BTN_HELP, BTN_CANCEL]],
    resize_keyboard=True
)

# -------------------- –î–û–ü–û–ú–û–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á NOTION --------------------
def notion_query(db_id: str, flt: Optional[Dict]=None, sorts: Optional[List]=None, page_size: int=100) -> Dict:
    payload: Dict[str, Any] = {"page_size": page_size}
    if flt:   payload["filter"] = flt
    if sorts: payload["sorts"]  = sorts
    r = requests.post(NOTION_DB_QUERY.format(db_id=db_id), headers=NOTION_HEADERS, json=payload, timeout=30)
    r.raise_for_status()
    return r.json()

def notion_create_page_in_catalog(name: str, type_val: str, parent_id: Optional[str]) -> Dict:
    props = {
        "Name": {"title":[{"text":{"content": name}}]},
        "Type": {"select":{"name": type_val}},
    }
    if parent_id:
        props["Parent"] = {"relation":[{"id": parent_id}]}
    payload = {"parent":{"database_id": CATALOG_DB_ID}, "properties": props}
    r = requests.post(NOTION_PAGES, headers=NOTION_HEADERS, json=payload, timeout=30)
    r.raise_for_status()
    return r.json()

def ensure_category(name: str) -> Dict:
    flt = {
        "and":[
            {"property":"Name", "title":{"equals": name}},
            {"property":"Type", "select":{"equals":"Category"}}
        ]
    }
    res = notion_query(CATALOG_DB_ID, flt, page_size=1)
    if res.get("results"):
        return res["results"][0]
    return notion_create_page_in_catalog(name, "Category", None)

def ensure_subcategory(name: str, parent_id: str) -> Dict:
    flt = {
        "and":[
            {"property":"Name", "title":{"equals": name}},
            {"property":"Type", "select":{"equals":"Subcategory"}},
            {"property":"Parent", "relation":{"contains": parent_id}}
        ]
    }
    res = notion_query(CATALOG_DB_ID, flt, page_size=1)
    if res.get("results"):
        return res["results"][0]
    return notion_create_page_in_catalog(name, "Subcategory", parent_id)

def list_categories() -> List[Dict]:
    flt = {"property":"Type","select":{"equals":"Category"}}
    res = notion_query(CATALOG_DB_ID, flt, page_size=100)
    items = []
    for r in res.get("results", []):
        nm = r["properties"]["Name"]["title"][0]["plain_text"] if r["properties"]["Name"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        items.append({"id": r["id"], "name": nm})
    # —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–∞–∑–≤–æ—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–∏—Ö –∫–Ω–æ–ø–æ–∫
    return sorted(items, key=lambda x: x["name"].lower())

def list_subcategories(parent_id: str) -> List[Dict]:
    flt = {
        "and":[
            {"property":"Type","select":{"equals":"Subcategory"}},
            {"property":"Parent","relation":{"contains": parent_id}}
        ]
    }
    res = notion_query(CATALOG_DB_ID, flt, page_size=100)
    items = []
    for r in res.get("results", []):
        nm = r["properties"]["Name"]["title"][0]["plain_text"] if r["properties"]["Name"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        items.append({"id": r["id"], "name": nm})
    return sorted(items, key=lambda x: x["name"].lower())

def notion_create_note(title: str, text: str, tags: List[str], cat_id: Optional[str], sub_id: Optional[str], src_url: Optional[str]) -> Dict:
    props: Dict[str, Any] = {
        "Name": {"title":[{"text":{"content": title[:200] or "Note"}}]},
        "Text": {"rich_text":[{"text":{"content": text or ""}}]},
        "Created": {"date":{"start": datetime.datetime.now().isoformat()}},
    }
    if tags:
        props["Tags"] = {"multi_select":[{"name":t} for t in tags]}
    if cat_id:
        props["Category"] = {"relation":[{"id": cat_id}]}
    if sub_id:
        props["Subcategory"] = {"relation":[{"id": sub_id}]}
    if src_url:
        props["Source"] = {"url": src_url}

    payload = {"parent":{"database_id": NOTES_DB_ID}, "properties": props}
    r = requests.post(NOTION_PAGES, headers=NOTION_HEADERS, json=payload, timeout=30)
    r.raise_for_status()
    return r.json()

# -------------------- –£–¢–ò–õ–Ü–¢–ò –î–õ–Ø –ö–ù–û–ü–û–ö --------------------
def chunk_buttons(items: List[Dict], prefix: str, per_row: int = 2) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    row: List[InlineKeyboardButton] = []
    for it in items:
        row.append(InlineKeyboardButton(it["name"], callback_data=f"{prefix}:{it['id']}"))
        if len(row) == per_row:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ —É –º–µ–Ω—é", callback_data="back:main")])
    return InlineKeyboardMarkup(rows)

def parse_tags(text: str) -> List[str]:
    return list({m.lower() for m in re.findall(r"#([A-Za-z–ê-–Ø–∞-—è0-9_]+)", text)})

# -------------------- –•–ï–ù–î–õ–ï–†–ò --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(
        "–ë–æ—Ç –Ω–∞ Railway ‚úÖ\n"
        "–û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.",
        reply_markup=MAIN_KB
    )
    return MAIN

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.effective_chat.send_message("–°–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—é –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=MAIN_KB)
    return MAIN

# ---- –î–û–î–ê–¢–ò –ö–ê–¢–ï–ì–û–†–Ü–Æ ----
async def add_cat_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=MAIN_KB)
    return ADD_CAT_WAIT_NAME

async def add_cat_got_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.")
        return ADD_CAT_WAIT_NAME
    try:
        page = ensure_category(name)
        await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {name}", reply_markup=MAIN_KB)
    except requests.HTTPError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ Notion: {e.response.text[:200]}")
    return MAIN

# ---- –î–û–î–ê–¢–ò –ü–Ü–î–ö–ê–¢–ï–ì–û–†–Ü–Æ ----
async def add_sub_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cats = list_categories()
    if not cats:
        await update.message.reply_text("–ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.", reply_markup=MAIN_KB)
        return MAIN
    kb = chunk_buttons(cats, "pick_cat")
    await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)
    return ADD_SUB_CHOOSE_CAT

async def add_sub_pick_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data == "back:main":
        await q.edit_message_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é."); 
        await q.message.reply_text("–ú–µ–Ω—é:", reply_markup=MAIN_KB); 
        return MAIN
    _, cat_id = q.data.split(":")
    context.user_data["sub_parent_id"] = cat_id
    await q.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")
    return ADD_SUB_WAIT_NAME

async def add_sub_got_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    parent_id = context.user_data.get("sub_parent_id")
    if not parent_id:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É. –ü–æ—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", reply_markup=MAIN_KB)
        return MAIN
    if not name:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑.")
        return ADD_SUB_WAIT_NAME
    try:
        page = ensure_subcategory(name, parent_id)
        await update.message.reply_text(f"‚úÖ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {name}", reply_markup=MAIN_KB)
    except requests.HTTPError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ Notion: {e.response.text[:200]}")
    finally:
        context.user_data.pop("sub_parent_id", None)
    return MAIN

# ---- –°–¢–í–û–†–ò–¢–ò –ù–û–¢–ê–¢–ö–£ ----
async def new_note_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cats = list_categories()
    if not cats:
        await update.message.reply_text("–ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.", reply_markup=MAIN_KB)
        return MAIN
    kb = chunk_buttons(cats, "nn_cat")
    await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –Ω–æ—Ç–∞—Ç–∫–∏:", reply_markup=kb)
    return NOTE_CHOOSE_CAT

async def new_note_pick_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data == "back:main":
        await q.edit_message_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.")
        await q.message.reply_text("–ú–µ–Ω—é:", reply_markup=MAIN_KB)
        return MAIN
    _, cat_id = q.data.split(":")
    context.user_data["nn_cat_id"] = cat_id

    subs = list_subcategories(cat_id)
    if not subs:
        await q.edit_message_text("–£ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
        await q.message.reply_text("–ú–µ–Ω—é:", reply_markup=MAIN_KB)
        return MAIN
    kb = chunk_buttons(subs, "nn_sub")
    await q.edit_message_text("–í–∏–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)
    return NOTE_CHOOSE_SUB

async def new_note_pick_sub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data == "back:main":
        await q.edit_message_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.")
        await q.message.reply_text("–ú–µ–Ω—é:", reply_markup=MAIN_KB)
        return MAIN
    _, sub_id = q.data.split(":")
    context.user_data["nn_sub_id"] = sub_id
    await q.edit_message_text("–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏. –•–µ—à—Ç–µ–≥–∏ –¥–æ–¥–∞–≤–∞–π —è–∫ #–º—ñ—Ç–∫–∞.")
    return NOTE_WAIT_TEXT

async def new_note_got_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç. –í—ñ–¥–ø—Ä–∞–≤ —â–µ —Ä–∞–∑.")
        return NOTE_WAIT_TEXT

    tags = parse_tags(text)
    cat_id = context.user_data.get("nn_cat_id")
    sub_id = context.user_data.get("nn_sub_id")

    # –§–æ—Ä–º—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä—à—ñ —Å–ª–æ–≤–∞ –±–µ–∑ —Ö–µ—à—Ç–µ–≥—ñ–≤)
    title = re.sub(r"#\S+", "", text).strip()
    title = title.split("\n")[0][:80] or "Note"

    try:
        notion_create_note(title, text, tags, cat_id, sub_id, None)
        await update.message.reply_text("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Notion.", reply_markup=MAIN_KB)
    except requests.HTTPError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ Notion: {e.response.text[:300]}", reply_markup=MAIN_KB)
    finally:
        context.user_data.pop("nn_cat_id", None)
        context.user_data.pop("nn_sub_id", None)
    return MAIN

# ---- –ü–û–®–£–ö ----
async def search_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ—à—É–∫—É –ø–æ –Ω–æ—Ç–∞—Ç–∫–∞—Ö:", reply_markup=MAIN_KB)
    return SEARCH_WAIT_QUERY

async def search_got_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = (update.message.text or "").strip()
    if not q:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.")
        return SEARCH_WAIT_QUERY
    flt = {"property":"Text","rich_text":{"contains": q}}
    try:
        res = notion_query(NOTES_DB_ID, flt, page_size=10)
        results = []
        for r in res.get("results", []):
            name_parts = r["properties"]["Name"]["title"]
            title = name_parts[0]["plain_text"] if name_parts else "(–±–µ–∑ –Ω–∞–∑–≤–∏)"
            results.append(f"‚Ä¢ {title}")
        if not results:
            await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=MAIN_KB)
        else:
            await update.message.reply_text("–ó–Ω–∞–π—à–æ–≤:\n" + "\n".join(results), reply_markup=MAIN_KB)
    except requests.HTTPError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ Notion: {e.response.text[:200]}", reply_markup=MAIN_KB)
    return MAIN

# ---- HELP ----
async def help_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–©–æ –≤–º—ñ—é:\n"
        "‚Ä¢ ‚ûï –ö–∞—Ç–µ–≥–æ—Ä—ñ—è ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.\n"
        "‚Ä¢ ‚ûï –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è ‚Äî –≤–∏–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —ñ –∑–∞–¥–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é.\n"
        "‚Ä¢ üìù –ù–æ—Ç–∞—Ç–∫–∞ ‚Äî –≤–∏–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é/–ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç (—Ö–µ—à—Ç–µ–≥–∏ —è–∫ #–º—ñ—Ç–∫–∞).\n"
        "‚Ä¢ üîé –ü–æ—à—É–∫ ‚Äî —à–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–æ–∫.\n",
        reply_markup=MAIN_KB
    )
    return MAIN

# ---- –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –í–ò–ë–û–†–£ –ó –ú–ï–ù–Æ ----
async def main_menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    if txt == BTN_ADD_CAT:
        return await add_cat_entry(update, context)
    if txt == BTN_ADD_SUB:
        return await add_sub_entry(update, context)
    if txt == BTN_NEW_NOTE:
        return await new_note_entry(update, context)
    if txt == BTN_SEARCH:
        return await search_entry(update, context)
    if txt == BTN_HELP:
        return await help_msg(update, context)
    if txt == BTN_CANCEL:
        return await cancel(update, context)
    # —è–∫—â–æ –ø—Ä–∏–π—à–æ–≤ –¥–æ–≤—ñ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç —É –≥–æ–ª–æ–≤–Ω–æ–º—É —Å—Ç–∞–Ω—ñ ‚Äî –ø—ñ–¥–∫–∞–∂–µ–º–æ –ø—Ä–æ –º–µ–Ω—é
    await update.message.reply_text("–û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.", reply_markup=MAIN_KB)
    return MAIN

# -------------------- MAIN() --------------------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_router)],
        states={
            MAIN: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_router),
            ],
            ADD_CAT_WAIT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_cat_got_name),
            ],
            ADD_SUB_CHOOSE_CAT: [
                CallbackQueryHandler(add_sub_pick_cat, pattern=r"^(pick_cat|back:main):"),
            ],
            ADD_SUB_WAIT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_sub_got_name),
            ],
            NOTE_CHOOSE_CAT: [
                CallbackQueryHandler(new_note_pick_cat, pattern=r"^(nn_cat|back:main):"),
            ],
            NOTE_CHOOSE_SUB: [
                CallbackQueryHandler(new_note_pick_sub, pattern=r"^(nn_sub|back:main):"),
            ],
            NOTE_WAIT_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, new_note_got_text),
            ],
            SEARCH_WAIT_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, search_got_query),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex(f"^{BTN_CANCEL}$"), cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv)

    # --- –≤–µ–±—Ö—É–∫ –¥–ª—è Railway ---
    if WEBHOOK_URL:
        path = "/tg"
        log.info("Starting webhook on %s", WEBHOOK_URL)
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=path,
            webhook_url=f"{WEBHOOK_URL}{path}",
        )
    else:
        log.info("Starting polling")
        app.run_polling()

if __name__ == "__main__":
    main()
