# -*- coding: utf-8 -*-
# app.py ‚Äî Telegram ‚Üî Notion –±–æ—Ç –∑ –∫–Ω–æ–ø–∫–∞–º–∏
#
# –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
# - /start: –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
# - ‚ûï –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤ Catalog
# - ‚ûï –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: –≤–∏–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ‚Üí –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Üí —Å—Ç–≤–æ—Ä–∏—Ç–∏
# - üìù –ù–æ—Ç–∞—Ç–∫–∞: –≤–∏–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é/–ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é ‚Üí –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç ‚Üí –∑–∞–ø–∏—Å —É Notes
# - üîç –ü–æ—à—É–∫: –ø–æ—à—É–∫ —É Notes (–ø–æ Title —Ç–∞ Text)
# - ‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞: –∫–æ—Ä–æ—Ç–∫–∞ –ø–∞–º‚Äô—è—Ç–∫–∞
# - ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏: –≤–∏—Ö—ñ–¥ —ñ–∑ –¥—ñ–∞–ª–æ–≥—É
#
# –ë–∞–∑–∏ Notion (–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –º–∞—é—Ç—å –±—É—Ç–∏ —Å–∞–º–µ –∑ —Ç–∞–∫–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏):
# Catalog:
#   - Name (title)
#   - Type (select: Category, Subcategory)
#   - Parent (relation -> —Ü–µ–π –∂–µ Catalog)
#
# Notes:
#   - Name (title)
#   - Text (rich_text)
#   - Tags (multi_select)         [–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ]
#   - Category (relation->Catalog)
#   - Subcategory (relation->Catalog)
#   - Files (files)               [–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ]
#   - Created (date)
#   - Source (url)
#
# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è (Railway ‚Üí Variables):
#   BOT_TOKEN            ‚Äî —Ç–æ–∫–µ–Ω Telegram
#   NOTION_API_KEY       ‚Äî secret_‚Ä¶ (Internal Integration Secret)
#     (–∞–±–æ NOTION_TOKEN  ‚Äî —è–∫—â–æ —Ç–∞–∫ –Ω–∞–∑–∏–≤–∞–≤, —Ç–µ–∂ —Å–ø—Ä–∞—Ü—é—î)
#   CATALOG_DB_ID        ‚Äî ID –∞–±–æ –ø–æ–≤–Ω–∏–π URL –±–∞–∑–∏ Catalog
#   NOTES_DB_ID          ‚Äî ID –∞–±–æ –ø–æ–≤–Ω–∏–π URL –±–∞–∑–∏ Notes
#   WEBHOOK_URL          ‚Äî https://<your>.railway.app
#   WEBHOOK_SECRET       ‚Äî –¥–æ–≤—ñ–ª—å–Ω–∏–π —Å—É—Ñ—ñ–∫—Å, –Ω–∞–ø—Ä. wh_XXXX (–±—É–¥–µ —à–ª—è—Ö /wh_XXXX)
#   PORT                 ‚Äî 8080 (Railway –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î —Å–∞–º)
#
# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ Railway:  python app.py

from __future__ import annotations

import dataclasses
import datetime
import json
import logging
import os
import re
import textwrap
from typing import Dict, List, Optional, Tuple

import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.constants import ParseMode
from telegram.ext import (
    AIORateLimiter,
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

# --------------------------- –õ–û–ì–ò -------------------------------------------
logging.basicConfig(
    format="%(asctime)s %(levelname)s:%(name)s: %(message)s", level=logging.INFO
)
log = logging.getLogger("bot")


# ---------------------- –ó–ú–Ü–ù–ù–Ü –û–¢–û–ß–ï–ù–ù–Ø -------------------------------------
def _env(name: str, default: Optional[str] = None) -> str:
    val = os.getenv(name, default)
    if val is None:
        raise RuntimeError(f"Set {name} in environment")
    return val


BOT_TOKEN = _env("BOT_TOKEN")
NOTION_TOKEN = os.getenv("NOTION_API_KEY") or os.getenv("NOTION_TOKEN")
if not NOTION_TOKEN:
    raise RuntimeError("Set NOTION_API_KEY (–∞–±–æ NOTION_TOKEN) —É Variables")

CATALOG_DB = _env("CATALOG_DB_ID")
NOTES_DB = _env("NOTES_DB_ID")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "wh_secret")
PORT = int(os.getenv("PORT", "8080"))

# ------------------------ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø NOTION --------------------------------
NOTION_VERSION = "2022-06-28"
N_HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Notion-Version": NOTION_VERSION,
    "Content-Type": "application/json",
}

NOTION_API = "https://api.notion.com/v1"


def _extract_db_id(db_or_url: str) -> str:
    """
    –î–æ–∑–≤–æ–ª—è—î –¥–∞–≤–∞—Ç–∏ —è–∫ —á–∏—Å—Ç–∏–π ID, —Ç–∞–∫ —ñ –ø–æ–≤–Ω–∏–π URL –±–∞–∑–∏.
    """
    db_or_url = db_or_url.strip()
    if "/" not in db_or_url and "-" in db_or_url or len(db_or_url) >= 32:
        # —Å—Ö–æ–∂–µ –Ω–∞ ID
        return db_or_url
    # URL -> –¥—ñ—Å—Ç–∞—î–º–æ 32-—Å–∏–º–≤–æ–ª—å–Ω–∏–π ID
    m = re.search(r"/([0-9a-fA-F]{32})", db_or_url.replace("-", ""))
    if m:
        return m.group(1)
    # fallback: —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–µ–≥–º–µ–Ω—Ç
    return db_or_url.split("/")[-1].split("?")[0]


CATALOG_DB_ID = _extract_db_id(CATALOG_DB)
NOTES_DB_ID = _extract_db_id(NOTES_DB)


# --------------------------- –•–ï–õ–ü–ï–†–ò NOTION ----------------------------------
def notion_query(db_id: str, payload: dict) -> dict:
    r = requests.post(f"{NOTION_API}/databases/{db_id}/query", headers=N_HEADERS, json=payload, timeout=30)
    if r.status_code >= 400:
        log.error("Notion query error: %s %s", r.status_code, r.text)
    r.raise_for_status()
    return r.json()


def notion_create_page(payload: dict) -> dict:
    r = requests.post(f"{NOTION_API}/pages", headers=N_HEADERS, json=payload, timeout=30)
    if r.status_code >= 400:
        log.error("Notion create page error: %s %s", r.status_code, r.text)
    r.raise_for_status()
    return r.json()


def notion_update_page(page_id: str, payload: dict) -> dict:
    r = requests.patch(f"{NOTION_API}/pages/{page_id}", headers=N_HEADERS, json=payload, timeout=30)
    if r.status_code >= 400:
        log.error("Notion update error: %s %s", r.status_code, r.text)
    r.raise_for_status()
    return r.json()


# -------------------------- –ú–û–î–ï–õ–Ü –î–ê–ù–ò–• -------------------------------------
@dataclasses.dataclass
class CatalogItem:
    id: str
    name: str
    type: str         # Category | Subcategory
    parent_id: Optional[str] = None


# ---------------------- –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ CATALOG -------------------------------
def get_categories() -> List[CatalogItem]:
    payload = {
        "filter": {
            "property": "Type",
            "select": {"equals": "Category"}
        },
        "page_size": 100
    }
    data = notion_query(CATALOG_DB_ID, payload)
    res: List[CatalogItem] = []
    for p in data.get("results", []):
        props = p["properties"]
        name = props["Name"]["title"][0]["plain_text"] if props["Name"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        typ = props["Type"]["select"]["name"] if props.get("Type", {}).get("select") else ""
        parent = None
        if props.get("Parent", {}).get("relation"):
            parent = props["Parent"]["relation"][0]["id"]
        res.append(CatalogItem(id=p["id"], name=name, type=typ, parent_id=parent))
    return sorted(res, key=lambda x: x.name.lower())


def get_subcategories(parent_id: str) -> List[CatalogItem]:
    payload = {
        "filter": {
            "and": [
                {"property": "Type", "select": {"equals": "Subcategory"}},
                {"property": "Parent", "relation": {"contains": parent_id}},
            ]
        },
        "page_size": 100
    }
    data = notion_query(CATALOG_DB_ID, payload)
    res: List[CatalogItem] = []
    for p in data.get("results", []):
        props = p["properties"]
        name = props["Name"]["title"][0]["plain_text"] if props["Name"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        typ = props["Type"]["select"]["name"] if props.get("Type", {}).get("select") else ""
        parent = None
        if props.get("Parent", {}).get("relation"):
            parent = props["Parent"]["relation"][0]["id"]
        res.append(CatalogItem(id=p["id"], name=name, type=typ, parent_id=parent))
    return sorted(res, key=lambda x: x.name.lower())


def find_catalog_by_name_exact(name: str) -> Optional[CatalogItem]:
    payload = {
        "filter": {
            "property": "Name",
            "title": {"equals": name}
        },
        "page_size": 1
    }
    data = notion_query(CATALOG_DB_ID, payload)
    if not data.get("results"):
        return None
    p = data["results"][0]
    props = p["properties"]
    typ = props["Type"]["select"]["name"] if props.get("Type", {}).get("select") else ""
    parent = None
    if props.get("Parent", {}).get("relation"):
        parent = props["Parent"]["relation"][0]["id"]
    nm = props["Name"]["title"][0]["plain_text"] if props["Name"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    return CatalogItem(id=p["id"], name=nm, type=typ, parent_id=parent)


def ensure_category(name: str) -> CatalogItem:
    ex = find_catalog_by_name_exact(name)
    if ex and ex.type == "Category":
        return ex
    payload = {
        "parent": {"database_id": CATALOG_DB_ID},
        "properties": {
            "Name": {"title": [{"type": "text", "text": {"content": name}}]},
            "Type": {"select": {"name": "Category"}},
        },
    }
    p = notion_create_page(payload)
    return CatalogItem(id=p["id"], name=name, type="Category", parent_id=None)


def ensure_subcategory(name: str, parent: CatalogItem) -> CatalogItem:
    ex = find_catalog_by_name_exact(name)
    if ex and ex.type == "Subcategory":
        # –Ø–∫—â–æ –∑–±—ñ–≥ —ñ –≤–∂–µ –∑–≤'—è–∑–∞–Ω–∏–π –∑ —Ç–∏–º —Å–∞–º–∏–º parent ‚Äî –ø–æ–≤–µ—Ä–Ω–µ–º–æ
        if ex.parent_id == parent.id:
            return ex
    payload = {
        "parent": {"database_id": CATALOG_DB_ID},
        "properties": {
            "Name": {"title": [{"type": "text", "text": {"content": name}}]},
            "Type": {"select": {"name": "Subcategory"}},
            "Parent": {"relation": [{"id": parent.id}]},
        },
    }
    p = notion_create_page(payload)
    return CatalogItem(id=p["id"], name=name, type="Subcategory", parent_id=parent.id)


# ------------------------ –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ NOTES --------------------------------
def create_note(
    title: str,
    text: str,
    category: Optional[CatalogItem] = None,
    subcategory: Optional[CatalogItem] = None,
    tags: Optional[List[str]] = None,
    source: Optional[str] = None,
) -> str:
    title = title.strip() or "–ù–æ—Ç–∞—Ç–∫–∞"
    created = datetime.datetime.now().isoformat()

    props = {
        "Name": {"title": [{"type": "text", "text": {"content": title[:200]}}]},
        "Text": {"rich_text": [{"type": "text", "text": {"content": text[:1800]}}]},
        "Created": {"date": {"start": created}},
    }
    if category:
        props["Category"] = {"relation": [{"id": category.id}]}
    if subcategory:
        props["Subcategory"] = {"relation": [{"id": subcategory.id}]}
    if tags:
        props["Tags"] = {"multi_select": [{"name": t[:50]} for t in tags[:10]]}
    if source:
        props["Source"] = {"url": source}

    payload = {"parent": {"database_id": NOTES_DB_ID}, "properties": props}
    p = notion_create_page(payload)
    return p["id"]


# ------------------------- –ö–ù–û–ü–ö–ò –¢–ê –°–¢–ê–ù–ò ------------------------------------
MENU, ADD_CAT_NAME, ADD_SUB_CHOOSE_CAT, ADD_SUB_NAME, NOTE_CHOOSE_CAT, NOTE_CHOOSE_SUB, NOTE_ENTER_TEXT, SEARCH_ENTER = range(
    8
)


def kb_main() -> ReplyKeyboardMarkup:
    rows = [
        ["‚ûï –ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "‚ûï –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è"],
        ["üìù –ù–æ—Ç–∞—Ç–∫–∞", "üîç –ü–æ—à—É–∫"],
        ["‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


def kb_back() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é"]], resize_keyboard=True)


def kb_list(items: List[str]) -> ReplyKeyboardMarkup:
    # –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–æ–∫, –ø–ª—é—Å "–Ω–∞–∑–∞–¥"
    rows = [[s] for s in items]
    rows.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


# --------------------------- HANDLERS -----------------------------------------
async def cmd_start(update: Update, ctx: CallbackContext) -> int:
    await update.message.reply_text("–ë–æ—Ç –Ω–∞ Railway ‚úÖ\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.", reply_markup=kb_main())
    return MENU


async def menu_router(update: Update, ctx: CallbackContext) -> int:
    text = (update.message.text or "").strip()

    if text == "‚ûï –ö–∞—Ç–µ–≥–æ—Ä—ñ—è":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=kb_back())
        return ADD_CAT_NAME

    if text == "‚ûï –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è":
        cats = get_categories()
        if not cats:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.", reply_markup=kb_main())
            return MENU
        ctx.user_data["CATS"] = cats
        await update.message.reply_text(
            "–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb_list([c.name for c in cats])
        )
        return ADD_SUB_CHOOSE_CAT

    if text == "üìù –ù–æ—Ç–∞—Ç–∫–∞":
        cats = get_categories()
        if not cats:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.", reply_markup=kb_main())
            return MENU
        ctx.user_data["CATS"] = cats
        await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –Ω–æ—Ç–∞—Ç–∫–∏:", reply_markup=kb_list([c.name for c in cats]))
        return NOTE_CHOOSE_CAT

    if text == "üîç –ü–æ—à—É–∫":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=kb_back())
        return SEARCH_ENTER

    if text == "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞":
        help_text = textwrap.dedent(
            """\
            üìò –ö–æ—Ä–æ—Ç–∫–æ:
            ‚Ä¢ ¬´–ö–∞—Ç–µ–≥–æ—Ä—ñ—è¬ª ‚Äî —Å—Ç–≤–æ—Ä—é—î –∑–∞–ø–∏—Å —É Catalog –∑ Type=Category.
            ‚Ä¢ ¬´–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è¬ª ‚Äî —Å–ø–µ—Ä—à—É –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –ø–æ—Ç—ñ–º –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
            ‚Ä¢ ¬´–ù–æ—Ç–∞—Ç–∫–∞¬ª ‚Äî –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é/–ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é —ñ –Ω–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç; –±—É–¥–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —É Notes.
            ‚Ä¢ ¬´–ü–æ—à—É–∫¬ª ‚Äî —à—É–∫–∞—î –Ω–æ—Ç–∞—Ç–∫–∏ —É Notes (–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–∞ Text).

            –£ Notion —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø ¬´Can read and write¬ª –¥–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –±–∞–∑.
            """
        )
        await update.message.reply_text(help_text, reply_markup=kb_main())
        return MENU

    if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=kb_main())
        return MENU

    # –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.", reply_markup=kb_main())
    return MENU


# ----- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
async def add_cat_name(update: Update, ctx: CallbackContext) -> int:
    text = (update.message.text or "").strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.", reply_markup=kb_main())
        return MENU

    try:
        cat = ensure_category(text)
    except Exception as e:
        log.exception("ensure_category failed")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {e}", reply_markup=kb_main())
        return MENU

    await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: *{cat.name}*", parse_mode=ParseMode.MARKDOWN, reply_markup=kb_main())
    return MENU


# ----- –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
async def add_sub_choose_cat(update: Update, ctx: CallbackContext) -> int:
    txt = (update.message.text or "").strip()
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.", reply_markup=kb_main())
        return MENU

    cats: List[CatalogItem] = ctx.user_data.get("CATS", [])
    sel = next((c for c in cats if c.name == txt), None)
    if not sel:
        await update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=kb_list([c.name for c in cats]))
        return ADD_SUB_CHOOSE_CAT

    ctx.user_data["PARENT_CAT"] = sel
    await update.message.reply_text(f"–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è ¬´{sel.name}¬ª:", reply_markup=kb_back())
    return ADD_SUB_NAME


async def add_sub_name(update: Update, ctx: CallbackContext) -> int:
    txt = (update.message.text or "").strip()
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.", reply_markup=kb_main())
        return MENU

    parent: CatalogItem = ctx.user_data.get("PARENT_CAT")
    if not parent:
        await update.message.reply_text("–ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", reply_markup=kb_main())
        return MENU

    try:
        sub = ensure_subcategory(txt, parent)
    except Exception as e:
        log.exception("ensure_subcategory failed")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {e}", reply_markup=kb_main())
        return MENU

    await update.message.reply_text(
        f"‚úÖ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è ¬´{sub.name}¬ª —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ ¬´{parent.name}¬ª.", reply_markup=kb_main()
    )
    return MENU


# ----- –ù–æ—Ç–∞—Ç–∫–∞
async def note_choose_cat(update: Update, ctx: CallbackContext) -> int:
    txt = (update.message.text or "").strip()
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.", reply_markup=kb_main())
        return MENU

    cats: List[CatalogItem] = ctx.user_data.get("CATS", [])
    cat = next((c for c in cats if c.name == txt), None)
    if not cat:
        await update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=kb_list([c.name for c in cats]))
        return NOTE_CHOOSE_CAT

    ctx.user_data["NOTE_CAT"] = cat

    subs = get_subcategories(cat.id)
    ctx.user_data["SUBS"] = subs
    labels = ["‚Äî –ë–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî"] + [s.name for s in subs]
    await update.message.reply_text("–í–∏–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb_list(labels))
    return NOTE_CHOOSE_SUB


async def note_choose_sub(update: Update, ctx: CallbackContext) -> int:
    txt = (update.message.text or "").strip()
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.", reply_markup=kb_main())
        return MENU

    sub: Optional[CatalogItem] = None
    if txt != "‚Äî –ë–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî":
        subs: List[CatalogItem] = ctx.user_data.get("SUBS", [])
        sub = next((s for s in subs if s.name == txt), None)
        if not sub:
            await update.message.reply_text("–í–∏–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=kb_list(["‚Äî –ë–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî"] + [s.name for s in subs]))
            return NOTE_CHOOSE_SUB

    ctx.user_data["NOTE_SUB"] = sub
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏:", reply_markup=kb_back())
    return NOTE_ENTER_TEXT


async def note_enter_text(update: Update, ctx: CallbackContext) -> int:
    txt = (update.message.text or "").strip()
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.", reply_markup=kb_main())
        return MENU

    cat: CatalogItem = ctx.user_data.get("NOTE_CAT")
    sub: Optional[CatalogItem] = ctx.user_data.get("NOTE_SUB")

    try:
        title = txt.splitlines()[0][:60]
        note_id = create_note(title=title, text=txt, category=cat, subcategory=sub, tags=None, source=None)
    except Exception as e:
        log.exception("create_note failed")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏: {e}", reply_markup=kb_main())
        return MENU

    await update.message.reply_text("‚úÖ –ù–æ—Ç–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ.", reply_markup=kb_main())
    return MENU


# ----- –ü–æ—à—É–∫
async def search_enter(update: Update, ctx: CallbackContext) -> int:
    txt = (update.message.text or "").strip()
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤ —É –º–µ–Ω—é.", reply_markup=kb_main())
        return MENU

    # –®—É–∫–∞—î–º–æ –ø–æ Name —Ç–∞ Text
    payload = {
        "filter": {
            "or": [
                {"property": "Name", "title": {"contains": txt}},
                {"property": "Text", "rich_text": {"contains": txt}},
            ]
        },
        "page_size": 5,
    }
    try:
        data = notion_query(NOTES_DB_ID, payload)
    except Exception as e:
        log.exception("search failed")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}", reply_markup=kb_main())
        return MENU

    if not data.get("results"):
        await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_main())
        return MENU

    msgs = []
    for p in data["results"]:
        props = p["properties"]
        title = props["Name"]["title"][0]["plain_text"] if props["Name"]["title"] else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        snippet = ""
        if props.get("Text", {}).get("rich_text"):
            snippet = props["Text"]["rich_text"][0]["plain_text"][:120]
        msgs.append(f"‚Ä¢ *{title}*\n`{snippet}`")

    await update.message.reply_text("\n\n".join(msgs), parse_mode=ParseMode.MARKDOWN, reply_markup=kb_main())
    return MENU


# ----- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, ctx: CallbackContext) -> int:
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=kb_main())
    return ConversationHandler.END


def build_application():
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_router)],
            ADD_CAT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_cat_name)],
            ADD_SUB_CHOOSE_CAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_sub_choose_cat)],
            ADD_SUB_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_sub_name)],
            NOTE_CHOOSE_CAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, note_choose_cat)],
            NOTE_CHOOSE_SUB: [MessageHandler(filters.TEXT & ~filters.COMMAND, note_choose_sub)],
            NOTE_ENTER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, note_enter_text)],
            SEARCH_ENTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_enter)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –î–æ–¥–∞—Ç–∫–æ–≤–æ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
    app.add_handler(CommandHandler("menu", cmd_start))
    app.add_handler(CommandHandler("cancel", cancel))

    return app


def main():
    app = build_application()

    if WEBHOOK_URL:
        path = f"/{WEBHOOK_SECRET}"
        log.info("Starting webhook on %s%s", WEBHOOK_URL, path)
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=WEBHOOK_SECRET,
            webhook_url=f"{WEBHOOK_URL}{path}",
        )
    else:
        log.info("Starting polling (WEBHOOK_URL not set)")
        app.run_polling()


if __name__ == "__main__":
    main()
