import os, tempfile
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from openai import OpenAI

BOT_TOKEN = os.environ["BOT_TOKEN"]
PORT = int(os.getenv("PORT", "8000"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")        # https://<service>.up.railway.app/<SECRET>
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")  # —Ç–æ–π —Å–∞–º–∏–π <SECRET>

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def start(update, ctx):
    await update.message.reply_text("–ë–æ—Ç –Ω–∞ Railway ‚úÖ –ù–∞–¥—ñ—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–µ ‚Äî —è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é –≤ —Ç–µ–∫—Å—Ç.")

async def transcribe_voice(update, ctx):
    v = update.message.voice or update.message.audio
    if not v:
        return
    # 1) —Å–∫–∞—á–∞—Ç–∏ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    tgfile = await ctx.bot.get_file(v.file_id)
    fd, path = tempfile.mkstemp(suffix=".ogg")   # —Ñ–∞–π–ª —É /tmp
    os.close(fd)
    await tgfile.download_to_drive(path)

    try:
        # 2) —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–µ—Ä–µ–∑ Whisper API
        with open(path, "rb") as f:
            r = client.audio.transcriptions.create(model="whisper-1", file=f)
        text = (r.text or "").strip() if r else ""
        if not text:
            text = "–ù–µ –ø–æ—á—É–≤ –∑–º—ñ—Å—Ç—É. –°–∫–∞–∂–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ üôÇ"
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–≤: {text}")
    except Exception as e:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
    finally:
        # 3) –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞—É–¥—ñ–æ
        try: os.remove(path)
        except: pass

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, transcribe_voice))

    path = WEBHOOK_URL.rsplit("/", 1)[-1] if WEBHOOK_URL else None
    if WEBHOOK_URL and WEBHOOK_SECRET:
        app.run_webhook(
            listen="0.0.0.0", port=PORT, url_path=path,
            webhook_url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET,
            drop_pending_updates=True
        )
    else:
        app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
